/*
 * Copyright (c) 2023 ZitaoTech
 *
 * Fork of ZitaoTech's zmk-config_9900. Optimized for iOS and Windows usage.
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT 0
#define ALT 1
#define SYM 2
#define UPPER 3

&sk { release-after-ms = <2000>; };

&sl { release-after-ms = <2000>; };

/ {
    behaviors {
        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&mkp LCLK>, <&bt BT_CLR>;
        };
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <500>;
            bindings = <&out &kp>;
        };
    };

    behaviors {
        tdp: tap_dance_punctuations {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp DOT>, <&kp COMMA>, <&kp EXCL>, <&kp QMARK>;
        };

        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            release-after-ms = <2000>;
            #binding-cells = <1>;
            bindings = <&kp>;
            quick-release;
        };

        hts: hold_tap_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&skq>;
        };

        tdsc: tap_dance_shft_clck {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&hts CLCK LSHFT>, <&kp CLCK>;
        };

        htsk: hold_tap_skq_kp {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&skq>, <&kp>;
        };

        tdcs: tap_dance_clck_shft {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&htsk LSHFT CLCK>, <&skq LSHFT>;
        };

        htl: hold_tap_layer {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&to>, <&msl>;
        };

        tdal: tap_dance_alt_layer {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&htl ALT ALT>, <&to ALT>;
        };

        tdsl: tap_dance_sym_layer {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&htl SYM SYM>, <&to SYM>;
        };

        // Credit: Drexel Macintosh
        // mtt expects LS(letter) letter to recreate BlackBerry's tap for lowercase and hold for uppercase behavior.

        mtt: mod_tap_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            require-prior-idle-ms = <125>;
            bindings = <&tap>, <&tap>;
        };
    };

    macros {
        msl: macro_sticky_layer {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings =
                <&macro_tap>,
                <&to DEFAULT &macro_param_1to1>,
                <&macro_tap>,
                <&sl MACRO_PLACEHOLDER>;
        };

        // Credit: Drexel Macintosh
        // tap will only send the keypress once, even if the key is held down.
        // This makes BlackBerry's hold for uppercase behavior easier to use.

        tap: tap {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;

            // By default, macros will tap each behavior in the bindings list,
            // so this will tap "&kp <param1>".

            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER>;
        };
    };

    combos {
        compatible = "zmk,combos";

        delete {
            bindings = <&kp DELETE>;
            key-positions = <37 26>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&mkp LCLK          &mkp RCLK
&htsk CAPS RSHIFT  &htsk LGUI LGUI  &mkp LCLK          &kp ESC  &sk RCTRL
&kp Q              &kp W            &kp E              &kp R    &kp T         &kp Y        &kp U         &kp I             &kp O  &kp P
&kp A              &kp S            &kp D              &kp F    &kp G         &kp H        &kp J         &kp K             &kp L  &kp BSPC
&htl ALT ALT       &kp Z            &kp X              &kp C    &kp V         &kp B        &kp N         &kp M             &tdp   &kp RET
                                    &htsk CAPS LSHIFT           &kp LEFT_ALT  &kp SPACE    &htl SYM SYM  &htsk CAPS LSHFT
            >;
        };

        alt_layer {
            bindings = <
&msc SCRL_UP       &msc SCRL_DOWN
&htsk CAPS LSHIFT  &htsk LGUI LGUI  &mkp LCLK        &kp ESC  &sk RCTRL
&kp HASH           &kp N1           &kp N2           &kp N3   &kp LPAR   &kp RPAR     &kp UNDER     &kp MINUS             &kp PLUS  &kp AT
&kp STAR           &kp N4           &kp N5           &kp N6   &kp SLASH  &kp COLON    &kp SEMI      &kp APOS              &kp DQT   &kp BSPC
&to DEFAULT        &kp N7           &kp N8           &kp N9   &kp QMARK  &kp EXCL     &kp COMMA     &kp DOT               &kp DLLR  &kp RET
                                    &hts CAPS LSHFT           &kp N0     &kp SPACE    &htl SYM SYM  &hts CAPSLOCK RSHIFT
            >;
        };

        sym_layer {
            bindings = <
&kp C_VOL_DN  &kp C_VOL_UP
&kp C_PREV    &kp C_AC_SEARCH  &mkp LCLK       &kp ESC    &kp C_NEXT
&kp TILDE     &none            &kp UP_ARROW    &none      &kp LBKT        &kp RBKT           &kp LT           &kp GT       &kp C_MUTE     &kp C_PLAY_PAUSE
&kp EQUAL     &kp LEFT_ARROW   &none           &kp RIGHT  &kp BSLH        &kp PIPE           &kp PRINTSCREEN  &kp HOME     &kp END        &kp DEL
&htl ALT ALT  &none            &sk DOWN_ARROW  &none      &kp LEFT_BRACE  &kp RIGHT_BRACE    &none            &kp PERCENT  &kp AMPERSAND  &kp RET
                               &to 3                      &sk GLOBE       &kp SPACE          &to DEFAULT      &to UPPER
            >;
        };

        upper_layer {
            bindings = <
&to 0              &to 0
&bt BT_SEL 0       &bt BT_SEL 1  &to 0        &bt BT_SEL 2  &bt BT_SEL 3
&ext_power EP_TOG  &none         &none        &sys_reset    &none         &none           &none        &none        &none        &none
&none              &none         &none        &none         &none         &none           &bl BL_INC   &none        &none        &none
&to DEFAULT        &none         &none        &none         &none         &bl BL_TOG      &bl BL_DEC   &none        &bootloader  &none
                                 &to DEFAULT                &to DEFAULT   &out OUT_TOG    &to DEFAULT  &to DEFAULT
            >;
        };
    };
};
